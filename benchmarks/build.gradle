plugins {
    id 'io.micronaut.build.internal.convention-base'
    id "me.champeau.jmh" version "0.7.2"
}

sourceSets {
    create("typeCheckTest") {
        compileClasspath += sourceSets.jmh.output
        runtimeClasspath += sourceSets.jmh.output
    }
}

dependencies {
    annotationProcessor project(":inject-java")
    jmhAnnotationProcessor project(":inject-java")
    jmhAnnotationProcessor libs.bundles.asm
    jmhAnnotationProcessor libs.jmh.generator.annprocess

    annotationProcessor platform(libs.test.boms.micronaut.validation)
    annotationProcessor (libs.micronaut.validation.processor) {
        exclude group: 'io.micronaut'
    }

    compileOnly platform(libs.test.boms.micronaut.validation)
    compileOnly (libs.micronaut.validation) {
        exclude group: 'io.micronaut'
    }

    api project(":inject")
    api project(":inject-java-test")
    api project(":http-server")
    api project(":http-server-netty")
    api project(":jackson-databind")
    api project(":router")
    api project(":runtime")

    api platform(libs.test.boms.micronaut.validation)
    api (libs.micronaut.validation) {
        exclude group: 'io.micronaut'
    }

    jmh libs.jmh.core

    typeCheckTestImplementation libs.junit.jupiter
    typeCheckTestImplementation libs.micronaut.test.type.pollution
    typeCheckTestImplementation ("net.bytebuddy:byte-buddy-agent:1.14.18")
    typeCheckTestImplementation ("net.bytebuddy:byte-buddy:1.14.18")
    typeCheckTestRuntimeOnly libs.junit.platform.engine
}

configurations {
    typeCheckTestImplementation.extendsFrom(jmhImplementation, implementation)
    typeCheckTestRuntimeOnly.extendsFrom(jmhRuntimeOnly, runtimeOnly)
}

jmh {
    includes = ['io.micronaut.http.server.StartupBenchmark']
    duplicateClassesStrategy = DuplicatesStrategy.WARN
}

tasks.named("processJmhResources") {
    duplicatesStrategy = DuplicatesStrategy.WARN
}

tasks.register('typeCheckTest', Test) {
    description = "Runs type check tests."
    group = "verification"

    testClassesDirs = sourceSets.typeCheckTest.output.classesDirs
    classpath = sourceSets.typeCheckTest.runtimeClasspath

    useJUnitPlatform()
}

check.dependsOn typeCheckTest

['spotlessJavaCheck', 'checkstyleMain', 'checkstyleJmh'].each {
    tasks.named(it) {
        enabled = false
    }
}
