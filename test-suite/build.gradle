import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id "io.micronaut.build.internal.convention-test-library"
    id 'io.micronaut.build.internal.functional-test'
    id 'java-test-fixtures'
}

micronautBuild {
    core {
        usesMicronautTestJunit()
        usesMicronautTestSpock()
    }
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor project(":inject-java")
    annotationProcessor platform(libs.test.boms.micronaut.validation)
    annotationProcessor (libs.micronaut.validation.processor) {
        exclude group: 'io.micronaut'
    }

    api project(":core-processor")

    testImplementation project(":context")
    testImplementation libs.managed.netty.codec.http
    testImplementation project(":http-server-netty")
    testImplementation project(":jackson-databind")
    testImplementation project(":http-client")
    testImplementation project(":http-client-jdk")
    testImplementation platform(libs.test.boms.micronaut.validation)
    testImplementation (libs.micronaut.validation) {
        exclude group: 'io.micronaut'
    }
    testImplementation (libs.micronaut.validation.processor) { // For Groovy
        exclude group: 'io.micronaut'
    }
    testImplementation project(":inject-groovy")
    testImplementation project(":inject-java")
    testImplementation project(":inject-java-test")
    testImplementation project(":management")
    testImplementation project(":runtime")
    testImplementation project(":inject")
    testImplementation project(":function-client")
    testImplementation project(":function-web")
    testImplementation (libs.micronaut.session) {
        exclude group: 'io.micronaut'
    }

    // Adding these for now since micronaut-test isnt resolving correctly ... probably need to upgrade gradle there too
    testImplementation libs.junit.jupiter.api

    testImplementation libs.jcache
    testImplementation libs.managed.groovy.json
    testImplementation libs.managed.groovy.templates
    // tag::testcontainers-dependencies[]
    testImplementation libs.testcontainers.spock
    // end::testcontainers-dependencies[]
    testImplementation libs.awaitility

    testAnnotationProcessor project(":test-suite-helper")
    testAnnotationProcessor project(":inject-java")
    testAnnotationProcessor project(":test-suite")
    testAnnotationProcessor platform(libs.test.boms.micronaut.validation)
    testAnnotationProcessor (libs.micronaut.validation.processor) {
        exclude group: 'io.micronaut'
    }

    testRuntimeOnly(platform(libs.test.boms.micronaut.aws))
    testRuntimeOnly libs.h2
    testRuntimeOnly libs.junit.vintage
    testRuntimeOnly libs.logback.classic
    testRuntimeOnly libs.aws.java.sdk.lambda

    // needed for HTTP/2 tests
    testImplementation platform(libs.boms.netty)
    testImplementation libs.netty.tcnative
    testImplementation libs.netty.tcnative.boringssl
    testImplementation(libs.netty.tcnative.boringssl) {
        artifact {
            classifier = Os.isFamily(Os.FAMILY_MAC) ? (Os.isArch("aarch64") ? "osx-aarch_64" : "osx-x86_64") : 'linux-x86_64'
        }
    }
    testImplementation libs.managed.netty.incubator.codec.http3
    testImplementation libs.logbook.netty
    testImplementation libs.logback.classic

    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_15)) {
        testImplementation libs.bcpkix
    }

    testImplementation libs.managed.reactor

    testFixturesApi libs.spock
    testFixturesApi libs.managed.groovy
    testFixturesApi libs.jetbrains.annotations
}

//tasks.withType(Test).configureEach {
//    useJUnitPlatform()
//
//    jvmArgs('-Dio.netty.leakDetection.level=paranoid')
//    testLogging {
//        showStandardStreams = true
//    }
//    beforeTest {
//        System.out.println("STARTING: ${it.className}.$it.name")
//        System.out.flush()
//    }
//    afterTest {
//        System.out.println("FINISHED: ${it.className}.$it.name")
//        System.out.flush()
//    }
//}

//compileTestJava.options.fork = true
//compileTestJava.options.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']
