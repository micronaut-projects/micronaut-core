import com.amazonaws.services.lambda.model.InvocationType
import jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask
import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask
import com.amazonaws.services.lambda.model.Runtime
buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        mavenLocal()

    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.22"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id "de.sebastianboegl.shadow.transformer.log4j" version "2.1.1"
    id 'groovy'
    id "application"
}

apply plugin: 'jp.classmethod.aws.lambda'

mainClassName = "example.HelloWorldSkill"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}
repositories {
    mavenLocal()
    mavenCentral()
}
dependencies {
    compileOnly "io.micronaut:inject-java:${projectVersion}"
    compile "io.micronaut:inject-groovy:${projectVersion}"
    //compile "io.micronaut:function-groovy:${projectVersion}"
    compile "com.amazon.alexa:ask-sdk:2.2.1"
    compile "io.micronaut:function-aws-alexa:${projectVersion}"
    runtime "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.9.1'


    testCompile "io.micronaut:function-client:${projectVersion}"
    testRuntime "io.micronaut:http-server-netty:${projectVersion}"
    testRuntime "io.micronaut:function-web:${projectVersion}"
    testRuntime group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.11.285'

    testCompile("org.spockframework:spock-core:1.1-groovy-2.4") {
        exclude module:'groovy-all'
    }

}
shadowJar {
    mergeServiceFiles()
}

task deploy(type: AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
    functionName = "hello-world"
    handler = "example.HelloWorldFunction::hello"
    role = "arn:aws:iam::${aws.accountId}:role/lambda_basic_execution"
    runtime = Runtime.Java8
    zipFile = shadowJar.archivePath
    memorySize = 256
    timeout = 60
}

task invoke(type: AWSLambdaInvokeTask) {
    functionName = "hello-world"
    invocationType = InvocationType.RequestResponse
    payload = '{"name":"Fred"}'
    doLast {
        println "Lambda function result: " + new String(invokeResult.payload.array(), "UTF-8")
    }
}
