plugins {
    id("io.micronaut.build.internal.convention-base")
    id("org.graalvm.buildtools.native")
}

micronautBuild {
    enableBom = false
    enableProcessing = false
}

dependencies {
    implementation(projects.httpServerTck)
    testImplementation(projects.httpServerNetty)
    testImplementation(projects.httpClient)
    testImplementation(libs.junit.platform.engine)
    testImplementation(libs.managed.logback.classic)
    implementation platform(libs.test.boms.micronaut.validation)
    implementation(libs.micronaut.validation) {
        exclude group: 'io.micronaut'
    }

}

configurations {
    all {
        // Stop serde pulling in AOP
        exclude group: 'io.micronaut', module: 'micronaut-aop'
        // Stop pulling in inject-groovy from maven
        exclude group: 'io.micronaut', module: 'micronaut-inject-groovy'
    }
    nativeImageTestClasspath {
        exclude module: 'groovy-test'
    }
}

tasks.named("check") { task ->
    def graal = ["jvmci.Compiler", "java.vendor.version", "java.vendor"].any {
        println "$it ${System.getProperty(it)}"
        System.getProperty(it)?.toLowerCase(Locale.ENGLISH)?.contains("graal")
    }
    if (graal) {
        task.dependsOn("nativeTest")
    }
}

def openGraalModules = [
        "org.graalvm.nativeimage.builder/com.oracle.svm.core.jdk",
        "org.graalvm.nativeimage.builder/com.oracle.svm.core.configure",
        "org.graalvm.sdk/org.graalvm.nativeimage.impl"
]

graalvmNative {
    toolchainDetection = false
    metadataRepository {
        enabled = true
    }
    binaries {
        all {
            openGraalModules.each { module ->
                jvmArgs.add("--add-exports=" + module + "=ALL-UNNAMED")
            }
        }
    }
}
