import org.apache.tools.ant.taskdefs.condition.Os

internalSanityChecks {
    expectedServiceCount.put('io.micronaut.inject.BeanDefinitionReference', 24)
}

test {
    systemProperty("io.netty.leakDetection.level", "paranoid")
    systemProperty("io.netty.customResourceLeakDetector", "io.micronaut.http.server.netty.fuzzing.BufferLeakDetection")
    maxHeapSize("1G")
}

dependencies {
    annotationProcessor project(":inject-java")
    annotationProcessor project(":graal")

    api project(":http-server")
    api project(":core")
    api project(":http-netty")
    api libs.managed.netty.codec.http

    implementation libs.managed.reactor

    compileOnly libs.kotlin.stdlib

    testCompileOnly project(":inject-groovy")
    testAnnotationProcessor project(":inject-java")
    testImplementation project(":inject")
    testImplementation project(":inject-java-test")
    testImplementation project(":http-client")
    testImplementation libs.managed.spotbugs
    testImplementation libs.powermock.junit4
    testImplementation libs.powermock.mockito2
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_15)) {
        testImplementation libs.bcpkix
    }
    testImplementation(libs.managed.micronaut.test.junit5) {
        exclude module:'micronaut-runtime'
        exclude module:'micronaut-inject'
    }
    testImplementation(libs.managed.micronaut.test.spock) {
        exclude module:'micronaut-runtime'
        exclude module:'micronaut-inject'
    }
    testImplementation(libs.managed.micronaut.xml) {
        exclude module:'micronaut-inject'
        exclude module:'micronaut-http'
    }
    testImplementation libs.managed.jackson.databind

    // http impls for tests
    testImplementation libs.vertx
    testImplementation libs.vertx.webclient
    testImplementation libs.httpcomponents.client
    testImplementation libs.jetty.alpn.openjdk8.client

    testImplementation libs.managed.groovy.json
    testImplementation libs.managed.groovy.templates

    testImplementation(libs.managed.netty.transport.native.epoll) {
        artifact {
            classifier = "linux-x86_64"
        }
    }
    testImplementation(libs.managed.netty.transport.native.kqueue) {
        artifact {
            classifier = Os.isArch("aarch64") ? "osx-aarch_64" : "osx-x86_64"
        }
    }
    testImplementation libs.managed.logback
    testImplementation(libs.managed.micronaut.test.junit5) {
        exclude module:'micronaut-runtime'
        exclude module:'micronaut-inject'
    }
    // Adding these for now since micronaut-test isnt resolving correctly ... probably need to upgrade gradle there too
    testImplementation libs.junit.jupiter.api
}

//tasks.withType(Test).configureEach {
//    testLogging {
//        showStandardStreams = true
//        exceptionFormat = 'full'
//    }
//}

//compileTestGroovy.groovyOptions.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']
