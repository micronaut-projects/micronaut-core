ext {
    shadowJarEnabled = true
}

dependencies {
    annotationProcessor project(":inject-java")
    annotationProcessor project(":graal")
    api project(":http")
    api project(':inject')
    api project(':aop')
    api project(':context')
    api project(":core-reactive")
    api libs.managed.validation
    api libs.managed.jackson.databind

    implementation libs.managed.reactor

    api libs.managed.jackson.datatype.jdk8
    api libs.managed.jackson.datatype.jsr310

    compileOnly libs.managed.graal
    compileOnly libs.managed.jcache

    compileOnly(libs.managed.jackson.module.kotlin) {
        transitive = false
    }
    compileOnly(libs.managed.jackson.module.afterburner) {
        transitive = false
    }
    compileOnly(libs.managed.jackson.module.parameterNames) {
        transitive = false
    }

    compileOnly libs.log4j
    compileOnly libs.javax.el
    compileOnly libs.caffeine
    compileOnly libs.kotlinx.coroutines.core
    compileOnly libs.kotlinx.coroutines.reactive
    compileOnly libs.managed.logback
    testImplementation libs.managed.logback

    testAnnotationProcessor project(":inject-java")
    testImplementation libs.jsr107
    testImplementation libs.managed.jcache
    testImplementation project(":inject-java")
    testImplementation project(":inject-java-test")
    testImplementation project(":inject-groovy")
    if (!JavaVersion.current().isJava9Compatible()) {
        testImplementation files(org.gradle.internal.jvm.Jvm.current().toolsJar)
    }
    testImplementation libs.systemlambda
}

//compileJava.options.fork = true
//compileJava.options.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']

//compileTestGroovy.groovyOptions.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']

spotless {
    java {
        targetExclude '**/io/micronaut/scheduling/cron/CronExpression.java'
    }
}
