/*
 * Copyright 2017-2021 original authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.micronaut.annotation.processing

import io.micronaut.annotation.processing.test.AbstractTypeElementSpec
import kotlin.coroutines.Continuation
import org.junit.Before
import spock.lang.Issue

@Issue("https://github.com/micronaut-projects/micronaut-core/issues/5396")
class SuspendMethodSpec extends AbstractTypeElementSpec {

    /**
     * The class tested here is a distillation of the Java class generated by kapt.
     * See io.micronaut.annotation.processing.DemoController in test-suite-kotlin.
     */
    public static final String DEMO_CONTROLLER = '''
package test;

import io.micronaut.http.MediaType;
import io.micronaut.http.annotation.*;
import kotlin.coroutines.Continuation;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Produces(value = {"text/plain"})
@Controller(value = "/demo")
public final class DemoController {
    
    @NotNull
    @Get(value = "/sync/any")
    public final Object syncAny() {
        return null;
    }
    
    @NotNull
    @Get(value = "/sync/string")
    public final String syncStr() {
        return null;
    }
    
    @Nullable
    @Get(value = "/async/any")
    public final Object asyncAny(@NotNull Continuation<Object> p0) {
        return null;
    }
    
    @Nullable
    @Get(value = "/async/string")
    public final Object asyncStr(@NotNull Continuation<? super String> p0) {
        return null;
    }
    
    public DemoController() {
        super();
    }
}
'''

    private definition = buildBeanDefinition('test.DemoController', DEMO_CONTROLLER)

    @Before
    void setup() {
        expect:
        definition != null
    }

    void "return type for a synchronous Kotlin method returning Any is Object"() {
        when:
        def method = definition.findMethod('syncAny')

        then:
        method.isPresent()
        method.get().returnType.type == Object
        !method.get().returnType.suspended
    }

    void "return type for a synchronous Kotlin method returning String is String"() {
        when:
        def method = definition.findMethod('syncStr')

        then:
        method.isPresent()
        method.get().returnType.type == String
        !method.get().returnType.suspended
    }

    void "return type for an asynchronous Kotlin method returning Any is Object"() {
        when:
        def method = definition.findMethod('asyncAny', Continuation)

        then:
        method.isPresent()
        method.get().returnType.type == Object
        method.get().returnType.suspended
    }

    void "return type for an asynchronous Kotlin method returning String is String"() {
        when:
        def method = definition.findMethod('asyncStr', Continuation)

        then:
        method.isPresent()
        method.get().returnType.type == String
        method.get().returnType.suspended
    }

}
