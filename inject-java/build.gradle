plugins {
    id "io.micronaut.build.internal.convention-library"
}

micronautBuild {
    core {
        usesMicronautTest()
    }
}

dependencies {
    api project(":core-processor")

    if (!JavaVersion.current().isJava9Compatible()) {
        compileOnly files(org.gradle.internal.jvm.Jvm.current().toolsJar)
    }
    compileOnly libs.managed.validation

    testImplementation project(":context")
    testImplementation project(':aop')
    testAnnotationProcessor project(":inject-java")
    testImplementation project(":inject-java-test")
    testImplementation project(":inject-test-utils")
    testImplementation project(":runtime")

    testImplementation libs.managed.reactor

    testImplementation libs.spotbugs
    testImplementation libs.hibernate
    testImplementation libs.compile.testing
    testImplementation(libs.neo4j.bolt)
    testImplementation libs.managed.groovy.json
    if (!JavaVersion.current().isJava9Compatible()) {
        testImplementation files(org.gradle.internal.jvm.Jvm.current().toolsJar)
    }
    testImplementation libs.micrometer.core
    testImplementation(libs.micronaut.session)
    testImplementation project(":validation")
    testImplementation project(":jackson-databind")
    testImplementation libs.junit.jupiter.api
    testImplementation(platform(libs.test.boms.micronaut.tracing))
    testImplementation(libs.micronaut.tracing.zipkin) {
        exclude module: 'micronaut-bom'
        exclude module: 'micronaut-http-client'
        exclude module: 'micronaut-inject'
        exclude module: 'micronaut-runtime'
    }
    testImplementation libs.javax.annotation.api
    testImplementation libs.managed.snakeyaml
    testRuntimeOnly libs.javax.el.impl
    testRuntimeOnly libs.javax.el
}
//compileTestJava.options.fork = true
//compileTestJava.options.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']


tasks.withType(Test).configureEach {
    forkEvery = 100
    maxParallelForks = 2
    useJUnitPlatform()
}

//compileTestGroovy.groovyOptions.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']
//compileTestGroovy.groovyOptions.fork = true
