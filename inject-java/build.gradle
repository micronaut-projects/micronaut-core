plugins {
    id "io.micronaut.build.internal.convention-library"
}

micronautBuild {
    core {
        usesMicronautTest()
    }
}

dependencies {
    api project(":core-processor")

    if (!JavaVersion.current().isJava9Compatible()) {
        compileOnly files(org.gradle.internal.jvm.Jvm.current().toolsJar)
    }

    testImplementation project(":context")
    testImplementation project(':aop')
    testImplementation projects.injectJavaHelper

    testAnnotationProcessor project(":inject-java")
    testAnnotationProcessor platform(libs.test.boms.micronaut.validation)
    testAnnotationProcessor (libs.micronaut.validation.processor) {
        exclude group: 'io.micronaut'
    }

    testImplementation project(":inject-java-test")
    testImplementation project(":inject-test-utils")
    testImplementation project(":runtime")

    testImplementation libs.managed.reactor

    testImplementation libs.spotbugs
    testImplementation libs.hibernate
    testImplementation libs.compile.testing
    testImplementation(libs.neo4j.bolt)
    testImplementation libs.managed.groovy.json
    if (!JavaVersion.current().isJava9Compatible()) {
        testImplementation files(org.gradle.internal.jvm.Jvm.current().toolsJar)
    }
    testImplementation (libs.micronaut.session) {
        exclude group: 'io.micronaut'
    }
    testImplementation(project(":http-server"))
    testImplementation platform(libs.test.boms.micronaut.validation)
    testImplementation (libs.micronaut.validation) {
        exclude group: 'io.micronaut'
    }
    testImplementation (libs.micronaut.validation.processor) {
        exclude group: 'io.micronaut'
    }
    testImplementation project(":jackson-databind")
    testImplementation libs.junit.jupiter.api
    testImplementation libs.javax.annotation.api
    testImplementation libs.javax.inject
    testImplementation libs.managed.snakeyaml
    testRuntimeOnly libs.jakarta.el.impl
    testRuntimeOnly libs.jakarta.el
}
//compileTestJava.options.fork = true
//compileTestJava.options.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']


tasks.withType(Test).configureEach {
    forkEvery = 100
    maxParallelForks = 4
    useJUnitPlatform()
}

//compileTestGroovy.groovyOptions.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']
//compileTestGroovy.groovyOptions.fork = true
