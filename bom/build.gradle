plugins {
    id 'java-platform'
    id 'maven-publish'
    id 'io.micronaut.build.internal.publishing'
}

group projectGroupId
version projectVersion


boolean micronautSnapshot = rootProject.version.toString().endsWith("-SNAPSHOT")

def excludedProjects = [
        "benchmarks",
        "inject-test-utils",
        "test-suite",
        "test-suite-groovy",
        "test-suite-helper",
        "test-suite-kotlin",
        "test-utils"
]

def catalog = project.extensions.findByType(VersionCatalogsExtension).named("libs")

// This map defines the names of the properties found in the POM file
// which cannot be directly inferred from the version name in the catalog.
// This is a backwards compatibility fix.
def legacyVersionNames = [
        'jakarta.annotation.api': 'jakarta.annotation-api',
        'javax.annotation.api': 'javax.annotation-api',
        'methvin.directory.watcher': 'methvin.directory-watcher',
        'paho.v3': 'pahov3',
        'paho.v5': 'pahov5',
        'graal.sdk': 'graalSdk',
        'neo4j.java.driver': 'neo4j.bolt',
]

String toPropertyName(String alias) {
    alias.split("(?=[A-Z])").collect { it.toLowerCase(Locale.US) }.join("-").replace((char)'-', (char)'.')
}

publishing {
    publications {
        publication(MavenPublication) {
            artifactId("micronaut-bom")
            from components.javaPlatform

            catalog.versionAliases.each { alias ->
                if (alias.startsWith('managed.')) {
                    catalog.findVersion(alias).ifPresent { version ->
                        alias = alias - 'managed.'
                        String baseName = legacyVersionNames[alias] ?: toPropertyName(alias)
                        String propertyName = "${baseName}.version"
                        pom.properties.put(propertyName, version.requiredVersion)
                    }
                }
            }
        }
    }
}

javaPlatform {
    allowDependencies()
}

dependencies {
    catalog.dependencyAliases.each { alias ->
        if (alias.startsWith("boms.")) {
            api platform(catalog.findDependency(alias).map {
                it.get()
            }.orElseThrow { new RuntimeException("Unexpected missing alias in catalog") })
        }
    }

    constraints {
        for (Project p : rootProject.subprojects) {
            if (!p.subprojects.empty) {
                continue
            }
            if (p.name.contains("bom")) {
                continue
            }
            if (excludedProjects.contains(p.name)) {
                continue
            }

            api "$p.group:micronaut-$p.name:$p.version"
        }

        catalog.dependencyAliases.each { alias ->
            if (alias.startsWith("managed.")) {
                api catalog.findDependency(alias).map {
                    it.get()
                }.orElseThrow { new RuntimeException("Unexpected missing alias in catalog") }
            }
        }

    }
}
