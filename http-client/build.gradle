import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "io.micronaut.build.internal.convention-library"
}

micronautBuild {
    core {
        usesMicronautTestJunit()
        usesMicronautTestSpock()
    }
}

dependencies {
    annotationProcessor project(":inject-java")
    api project(":context")
    api project(":http-client-core")
    api project(":websocket")
    api project(":http-netty")
    api libs.managed.netty.handler.proxy

    compileOnly libs.managed.netty.incubator.codec.http3

    testAnnotationProcessor platform(libs.test.boms.micronaut.validation)
    testAnnotationProcessor (libs.micronaut.validation.processor) {
        exclude group: 'io.micronaut'
    }
    testAnnotationProcessor project(":inject-java")

    testCompileOnly project(":inject-groovy")
    testImplementation project(":inject")

    testImplementation platform(libs.test.boms.micronaut.validation)
    testImplementation (libs.micronaut.validation) {
        exclude group: 'io.micronaut'
    }
    testImplementation (libs.micronaut.validation.processor) { // For Groovy
        exclude group: 'io.micronaut'
    }

    implementation libs.managed.reactor

    testImplementation project(":retry")
    testImplementation project(":jackson-databind")
    testImplementation project(":http-server-netty")
    testImplementation libs.wiremock
    testImplementation libs.logback.classic

    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_15)) {
        testImplementation libs.bcpkix
    }
    testRuntimeOnly(libs.managed.netty.tcnative.boringssl.static) {
        artifact {
            classifier = Os.isArch("aarch64") ? "osx-aarch_64" : "osx-x86_64"
        }
    }
}

//tasks.withType(Test).configureEach {
//    jvmArgs('-Dio.netty.leakDetection.level=paranoid')
//    testLogging {
//        showStandardStreams = true
//    }
//    beforeTest {
//        System.out.println("STARTING: ${it.className}.$it.name")
//        System.out.flush()
//    }
//    afterTest {
//        System.out.println("FINISHED: ${it.className}.$it.name")
//        System.out.flush()
//    }
//}
