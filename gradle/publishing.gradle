/**
 * To use this when setting up Travis run the following commands to encrypt
 * the necessary environment variables for publishing to work
 *
 * $ travis encrypt SIGNING_PASSPHRASE=...
 * $ travis encrypt SONATYPE_USERNAME=...
 * $ travis encrypt SONATYPE_PASSWORD=...
 * $ travis encrypt ARTIFACTORY_USERNAME=...
 * $ travis encrypt ARTIFACTORY_PASSWORD=...
 * $ travis encrypt BINTRAY_USER=...
 * $ travis encrypt BINTRAY_KEY=...
 *
 */

buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    }
}


import groovyx.net.http.RESTClient
import static groovyx.net.http.ContentType.*

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

ext.extraPomInfo = {}
ext.pomInfo = {
    delegate.name project.title
    delegate.description project.projectDesc
    delegate.url projectUrl

    delegate.licenses {
        delegate.license {
            delegate.name 'The Apache Software License, Version 2.0'
            delegate.url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            delegate.distribution 'repo'
        }
    }

    delegate.scm {
        delegate.url "scm:git@github.com:${githubSlug}.git"
        delegate.connection "scm:git@github.com:${githubSlug}.git"
        delegate.developerConnection "scm:git@github.com:${githubSlug}.git"
    }

    if (developers) {
        delegate.developers {
            for (dev in developers.split(',')) {
                delegate.developer {
                    delegate.id dev.toLowerCase().replace(' ', '')
                    delegate.name dev
                }
            }
        }
    }
    ext.extraPomInfo.delegate = delegate
    ext.extraPomInfo.call()
}

if (project.name != 'bom') {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }    
}

publishing {
    afterEvaluate {
        repositories {
            maven {
                credentials {
                    def bintrayUser = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
                    def bintrayKey = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''

                    username = bintrayUser
                    password = bintrayKey
                }
                url  "https://oss.jfrog.org/oss-snapshot-local"
            }
        }

        publications {
            maven(MavenPublication) {
                artifactId("micronaut-" + project.name.substring(project.name.indexOf('/') + 1))
                if (project.name == "bom") {
                    from components.javaPlatform

                    pom.withXml {
                        def xml = asNode()

                        xml.children().find {
                            it.name().localPart == 'packaging'
                        } + pomInfo


                        for(dep in dependencyVersions) {
                            String property = "\${${dep.key}.version}"
                            def info = dep.value
                            def version = info.version
                            def group = info.group
                            if (group && version) {
                                def modules = []
                                if (info.name) {
                                    modules << info.name
                                }
                                if (info.modules) {
                                    modules.addAll(info.modules)
                                }
                                for (module in modules) {

                                    def pomDep = xml.dependencyManagement.dependencies.dependency.find {
                                        it.artifactId.text() == module &&
                                                it.groupId.text() == group
                                    }
                                    if (pomDep != null) {
                                        pomDep.version.first().setValue(property)
                                    }
                                }
                                
                            }
                        }
                    }

                } else if (project.name == "cli") {
                    from components.java
                    artifact cliZip {
                        classifier "dist"
                    }
                    artifact sourcesJar
                    artifact javadocJar

                    pom.withXml {
                        def xml = asNode()

                        xml.children().last() + pomInfo
                    }
                } else if (project.shadowJarEnabled == true) {
                    def shadowJar = tasks.findByName("shadowJar")
                    artifact(project.tasks.shadowJar) {
                        classifier = null
                    }
                    pom.withXml { xml ->
                        def xmlNode = xml.asNode()
                        def dependenciesNode = xmlNode.appendNode('dependencies')
                        Set<Dependency> visited = new HashSet<>()

                        project.configurations.api.allDependencies.each {
                            if (!(it instanceof SelfResolvingDependency)) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                                dependencyNode.appendNode('scope', 'compile')
                            } else if (it instanceof ProjectDependency) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', project.group)
                                dependencyNode.appendNode('artifactId', "micronaut-$it.name")
                                dependencyNode.appendNode('version', project.version)
                                dependencyNode.appendNode('scope', 'compile')
                            }
                            visited.add(it)
                        }
                        project.configurations.runtime.allDependencies.each {
                            if (visited.contains(it)) {
                                return
                            }
                            if (!(it instanceof SelfResolvingDependency)) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                                dependencyNode.appendNode('scope', 'runtime')
                            } else if (it instanceof ProjectDependency) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', project.group)
                                dependencyNode.appendNode('artifactId', "micronaut-$it.name")
                                dependencyNode.appendNode('version', project.version)
                                dependencyNode.appendNode('scope', 'runtime')

                            }
                            visited.add(it)
                        }
                    }

                    pom.withXml {
                        def xml = asNode()

                        xml.children().last() + pomInfo
                    }

                    artifact sourcesJar {
                        classifier "sources"
                    }
                    artifact javadocJar {
                        classifier "javadoc"
                    }
                } else {
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar

                    pom.withXml {
                        def xml = asNode()

                        xml.children().last() + pomInfo
                    }
                }
            }
        }
    }
}

def bintrayUser = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
def bintrayKey = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''
def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''

bintray {

    user = bintrayUser
    key = bintrayKey
    publications = ['maven']
    publish = false
    pkg {
        repo = 'core-releases-local'
        userOrg = 'micronaut'
        name = project.name
        desc = "${project.title} - ${project.projectDesc} - ${project.name} module".toString()
        websiteUrl = projectUrl
        issueTrackerUrl = "https://github.com/$githubSlug/issues"
        vcsUrl = "https://github.com/$githubSlug"
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
        version {
            name = project.version
            gpg {
                sign = true
                passphrase = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signingPassphrase") ? project.signingPassphrase : ''
            }
            mavenCentralSync {
                sync = project.hasProperty("mavenCentralSync") ? project.mavenCentralSync.toBoolean() : false
                user = ossUser
                password = ossPass
            }

        }
    }
}

task synchronizeWithMavenCentral() {
    description = "Syncs with Maven Central/Sonatype"
    doLast {
        boolean ongoing = true

        println """
Synchronizing with Maven central. This may take a few minutes ...
If this fails, log on to http://oss.sonatype.org/ using the centralUser credentials
and progress through process manually -> Close -> Publish ... under staging repositories
"""
        // this hack is here to keep Travis from thinking this is
        // a stalled build
        Thread.start {
            while(ongoing) {
                sleep 5000
                println "Still Publishing. Please wait..."
            }
        }
        try {
            try {
                def mavenClent = new RESTClient("https://repo.maven.apache.org/maven2/")
                mavenClent.get(path:"${project.group.replace('.','/')}/micronaut-$project.name/$project.version/micronaut-$project.name-${project.version}.jar")
            } catch(groovyx.net.http.HttpResponseException e) {
                // doesn't exist.. try sync
                def client = new RESTClient('https://api.bintray.com/maven_central_sync/micronaut/core-releases-local/')
                client.headers['Authorization'] = 'Basic ' + "$bintrayUser:$bintrayKey".getBytes('iso-8859-1').encodeBase64()
                def body = /{}/
                def resp = client.post(
                        path: "$bintray.pkg.name/versions/$project.version",
                        body: body,
                        requestContentType: JSON
                )
                assert resp.status == 200

                println resp.data.status
                println resp.data.messages.join('\n')
            }
        } catch (groovyx.net.http.HttpResponseException e) {
            println "Error: $e"
            println "Message: $e.message"
            println "Body: $e.response.data"
            throw e
        } finally {
            ongoing = false
        }
    }
}

if (!project.version.endsWith("-SNAPSHOT")) {
    // disable remote publish for non-snapshot versions
    // since releases are published to bintray
    tasks.withType(PublishToMavenRepository) { task ->
        task.enabled = false
    }
}
