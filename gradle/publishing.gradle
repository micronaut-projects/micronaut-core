/**
 * To use this when setting up Travis run the following commands to encrypt
 * the necessary environment variables for publishing to work
 *
 * $ travis encrypt SIGNING_PASSPHRASE=...
 * $ travis encrypt SONATYPE_USERNAME=...
 * $ travis encrypt SONATYPE_PASSWORD=...
 * $ travis encrypt ARTIFACTORY_USERNAME=...
 * $ travis encrypt ARTIFACTORY_PASSWORD=...
 * $ travis encrypt BINTRAY_USER=...
 * $ travis encrypt BINTRAY_KEY=...
 *
 */
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.bmuschko.nexus'

ext.extraPomInfo = {}
ext.pomInfo = {
    delegate.name project.title
    delegate.description project.projectDesc
    delegate.url projectUrl

    delegate.licenses {
        delegate.license {
            delegate.name 'The Apache Software License, Version 2.0'
            delegate.url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            delegate.distribution 'repo'
        }
    }

    delegate.scm {
        delegate.url "scm:git@github.com:${githubSlug}.git"
        delegate.connection "scm:git@github.com:${githubSlug}.git"
        delegate.developerConnection "scm:git@github.com:${githubSlug}.git"
    }

    if(developers) {
        delegate.developers {
            for(dev in developers.split(',')) {
                delegate.developer {
                    delegate.id dev.toLowerCase().replace(' ', '')
                    delegate.name dev
                }
            }
        }
    }
    ext.extraPomInfo.delegate = delegate
    ext.extraPomInfo.call()
}



modifyPom {
    project(pomInfo)
}

publishing {

    repositories {
        maven {
            credentials {
                def u = System.getenv("ARTIFACTORY_USERNAME") ?: project.hasProperty("artifactoryPublishUsername") ? project.artifactoryPublishUsername : ''
                def p = System.getenv("ARTIFACTORY_PASSWORD") ?: project.hasProperty("artifactoryPublishPassword") ? project.artifactoryPublishPassword : ''
                username = u
                password = p
            }
            if(isBuildSnapshot) {
                url  "https://repo.micronaut.io/artifactory/libs-snapshots-local"
            }
            else {
                url "https://repo.micronaut.io/artifactory/libs-releases-local"
            }
        }
    }

    publications {
        maven(MavenPublication) { publication ->
            artifactId( project.name.substring(project.name.indexOf('/') + 1) )
            def shadowJar = tasks.findByName("shadowJar")
            if(shadowJar) {
                artifact(project.tasks.shadowJar) {
                    classifier = null
                }
                pom.withXml { xml ->
                    def xmlNode = xml.asNode()
                    def dependenciesNode = xmlNode.appendNode('dependencies')

                    project.configurations.shadow.allDependencies.each {
                        if (! (it instanceof SelfResolvingDependency)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'runtime')
                        }
                    }
                    project.configurations.shadowCompile.allDependencies.each {
                        if (! (it instanceof SelfResolvingDependency)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                        else if(it instanceof ProjectDependency) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', project.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', project.version)
                            dependencyNode.appendNode('scope', 'compile')

                        }
                    }
                    project.configurations.shadowRuntime.allDependencies.each {
                        if (! (it instanceof SelfResolvingDependency)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'runtime')
                        }
                        else if(it instanceof ProjectDependency) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', project.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', project.version)
                            dependencyNode.appendNode('scope', 'runtime')

                        }
                    }
                    xmlNode.children().last() + pomInfo
                }
                artifact sourcesJar {
                    classifier "sources"
                }
                artifact javadocJar {
                    classifier "javadoc"
                }

            }
            else {
                from components.java
                artifact sourcesJar {
                    classifier "sources"
                }
                artifact javadocJar {
                    classifier "javadoc"
                }

                pom.withXml {
                    def xml = asNode()

                    xml.children().last() + pomInfo
                }
            }

        }
    }
}

bintray {
    def u = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
    def p = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''

    user = u
    key = p
    publications = ['maven']
    publish = true
    pkg {
        repo = 'micronaut-core'
        userOrg = 'micronaut-projects'
        name = project.name
        desc = "${project.title} - ${project.projectDesc}".toString()
        websiteUrl = projectUrl
        issueTrackerUrl = "https://github.com/$githubSlug/issues"
        vcsUrl = "https://github.com/$githubSlug"
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
        version {
            name = project.version
            gpg {
                sign = true
                passphrase = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signingPassphrase") ? project.signingPassphrase : ''
            }
            mavenCentralSync {
                sync = project.hasProperty("mavenCentralSync") ? project.mavenCentralSync.toBoolean() : false
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
                user = ossUser
                password = ossPass
            }

        }
    }
}
