[versions]
asm = "9.7"
awaitility = "4.2.1"
bcpkix = "1.70"
blaze = "1.6.11"
brotli4j = "1.16.0"
caffeine = "2.9.3"
compile-testing = "0.21.0"

geb = "7.0"
# be sure to update graal version in gradle.properties as well
graal-svm = "23.1.3"
h2 = "2.2.224"
hibernate = "5.5.9.Final"
htmlunit = "2.70.0"
httpcomponents-client = "4.5.14"
jakarta-inject-api = "2.0.1"
jakarta-inject-tck = "2.0.1"
javax-annotation-api = "1.3.2"
javax-inject = "1"
javax-persistence = "2.2"
jakarta-persistence = "3.1.0"
jetbrains-annotations = "23.1.0"
jetty = "9.4.48.v20220622"
jmh = "1.37"
jsr107 = "1.1.1"
jsr305 = "3.0.2"
jakarta-el = "5.0.1"
jakarta-el-impl = "5.0.0-M1"
jazzer = "0.22.1"
jcache = "1.1.1"
junit5 = "5.10.2"
junit-platform="1.10.2"
logback = "1.5.6"
logbook-netty = "2.16.0"
log4j = "2.23.1"
micronaut-aws = "4.5.0"
micronaut-groovy = "4.3.0"
micronaut-session = "4.3.0"
micronaut-sql = "5.3.0"
micronaut-test = "4.1.1"
micronaut-validation = "4.5.0"
micronaut-rxjava2 = "2.3.0"
micronaut-rxjava3 = "3.3.0"
micronaut-reactor = "3.3.0"
neo4j-java-driver = "5.17.0"
selenium = "4.9.1"
slf4j = "2.0.13"
smallrye = "6.3.0"
spock = "2.3-groovy-4.0"
spotbugs = "4.7.1"
systemlambda = "1.2.1"
testcontainers = "1.19.7"
vertx = "4.5.7"
wiremock = "2.33.2"

#
# Versions which start with managed- are managed by Micronaut in the sense
# that they will appear in the Micronaut BOM as <properties>
#
managed-groovy = "4.0.21"
managed-jakarta-annotation-api = "2.1.1"
managed-jackson = "2.17.1"
#@NextMajorVersion @Deprecated Delete in Micronaut Framework 5.
managed-jackson-databind = "2.17.0"
managed-kotlin = "1.9.23"
managed-kotlin-coroutines = "1.7.3"
managed-methvin-directory-watcher = "0.18.0"
managed-netty = "4.1.109.Final"
managed-netty-iouring = "0.0.25.Final"
managed-netty-http3 = "0.0.28.Final"
managed-netty-tcnative = "2.0.65.Final"
managed-reactive-streams = "1.0.4"
# This should be kept aligned with https://github.com/micronaut-projects/micronaut-reactor/blob/master/gradle.properties from the BOM
managed-reactor = "3.5.11"
managed-snakeyaml = "2.2"
managed-java-parser-core = "3.25.10"
managed-ksp = "1.9.23-1.0.20"
micronaut-docs = "2.0.0"

[libraries]
# Libraries prefixed with bom- are BOM files
test-boms-micronaut-aws = { module = "io.micronaut.aws:micronaut-aws-bom", version.ref = "micronaut-aws" }
test-boms-micronaut-sql = { module = "io.micronaut.sql:micronaut-sql-bom", version.ref = "micronaut-sql" }
test-boms-micronaut-validation = { module = "io.micronaut.validation:micronaut-validation-bom", version.ref = "micronaut-validation" }
test-boms-micronaut-rxjava2 = { module = "io.micronaut.rxjava2:micronaut-rxjava2-bom", version.ref = "micronaut-rxjava2" }
test-boms-micronaut-rxjava3 = { module = "io.micronaut.rxjava3:micronaut-rxjava3-bom", version.ref = "micronaut-rxjava3" }
test-boms-micronaut-reactor = { module = "io.micronaut.reactor:micronaut-reactor-bom", version.ref = "micronaut-reactor" }

boms-groovy = { module = "org.apache.groovy:groovy-bom", version.ref = "managed-groovy" }
boms-kotlin = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "managed-kotlin" }
boms-kotlin-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-bom", version.ref = "managed-kotlin-coroutines" }
boms-netty = { module = "io.netty:netty-bom", version.ref = "managed-netty" }
boms-jackson = { module = "com.fasterxml.jackson:jackson-bom", version.ref = "managed-jackson" }

#
# Libraries which start with managed- are managed by Micronaut in the sense
# that they will appear in the Micronaut BOM
#

managed-groovy = { module = "org.apache.groovy:groovy", version.ref = "managed-groovy" }
managed-groovy-json = { module = "org.apache.groovy:groovy-json", version.ref = "managed-groovy" }
managed-groovy-sql = { module = "org.apache.groovy:groovy-sql", version.ref = "managed-groovy" }
managed-groovy-templates = { module = "org.apache.groovy:groovy-templates", version.ref = "managed-groovy" }

managed-jakarta-annotation-api = { module = "jakarta.annotation:jakarta.annotation-api", version.ref = "managed-jakarta-annotation-api" }

managed-jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "managed-jackson" }
managed-jackson-core = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "managed-jackson" }
managed-jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "managed-jackson" }
managed-jackson-datatype-jdk8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jdk8", version.ref = "managed-jackson" }
managed-jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "managed-jackson" }
managed-jackson-dataformat-yaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "managed-jackson" }
managed-jackson-dataformat-xml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-xml", version.ref = "managed-jackson" }
managed-jackson-module-afterburner = { module = "com.fasterxml.jackson.module:jackson-module-afterburner", version.ref = "managed-jackson" }
managed-jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "managed-jackson" }
managed-jackson-module-parameterNames = { module = "com.fasterxml.jackson.module:jackson-module-parameter-names", version.ref = "managed-jackson" }

managed-kotlin-annotation-processing-embeddable = { module = "org.jetbrains.kotlin:kotlin-annotation-processing-embeddable", version.ref = "managed-kotlin" }
managed-kotlin-compiler-embeddable = { module = "org.jetbrains.kotlin:kotlin-compiler-embeddable", version.ref = "managed-kotlin" }
managed-kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "managed-kotlin" }
managed-kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "managed-kotlin" }
managed-kotlin-stdlib-jdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "managed-kotlin" }
managed-kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "managed-kotlin" }

managed-kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "managed-kotlin-coroutines" }
managed-kotlinx-coroutines-jdk8 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8", version.ref = "managed-kotlin-coroutines" }
managed-kotlinx-coroutines-reactive = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactive", version.ref = "managed-kotlin-coroutines" }
managed-kotlinx-coroutines-rx2 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-rx2", version.ref = "managed-kotlin-coroutines" }
managed-kotlinx-coroutines-slf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "managed-kotlin-coroutines" }
managed-kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "managed-kotlin-coroutines" }

managed-ksp-api = { module = "com.google.devtools.ksp:symbol-processing-api", version.ref = "managed-ksp" }
managed-ksp = { module = "com.google.devtools.ksp:symbol-processing", version.ref = "managed-ksp" }
managed-java-parser-core = { module = "com.github.javaparser:javaparser-symbol-solver-core", version.ref = "managed-java-parser-core" }
managed-methvin-directoryWatcher = { module = "io.methvin:directory-watcher", version.ref = "managed-methvin-directory-watcher" }

managed-netty-buffer = { module = "io.netty:netty-buffer", version.ref = "managed-netty" }
managed-netty-codec-http = { module = "io.netty:netty-codec-http", version.ref = "managed-netty" }
managed-netty-codec-http2 = { module = "io.netty:netty-codec-http2", version.ref = "managed-netty" }
managed-netty-common = { module = "io.netty:netty-common", version.ref = "managed-netty" }
managed-netty-incubator-codec-http3 = { module = "io.netty.incubator:netty-incubator-codec-http3", version.ref = "managed-netty-http3" }
managed-netty-handler = { module = "io.netty:netty-handler", version.ref = "managed-netty" }
managed-netty-handler-proxy = { module = "io.netty:netty-handler-proxy", version.ref = "managed-netty" }
managed-netty-transport-native-epoll = { module = "io.netty:netty-transport-native-epoll", version.ref = "managed-netty" }
managed-netty-transport-native-kqueue = { module = "io.netty:netty-transport-native-kqueue", version.ref = "managed-netty" }
managed-netty-transport-native-iouring = { module = "io.netty.incubator:netty-incubator-transport-native-io_uring", version.ref = "managed-netty-iouring" }
managed-netty-transport-native-unix-common = { module = "io.netty:netty-transport-native-unix-common", version.ref = "managed-netty" }
managed-netty-tcnative-boringssl-static = { module = "io.netty:netty-tcnative-boringssl-static", version.ref = "managed-netty-tcnative" }

managed-reactive-streams = { module = "org.reactivestreams:reactive-streams", version.ref = "managed-reactive-streams" }

managed-reactor = { module = "io.projectreactor:reactor-core", version.ref = "managed-reactor" }
managed-reactor-test = { module = "io.projectreactor:reactor-test", version.ref = "managed-reactor" }

managed-snakeyaml = { module = "org.yaml:snakeyaml", version.ref = "managed-snakeyaml" }

#
# Other libraries are used by Micronaut but will not appear in the BOM
#
asm = { module = "org.ow2.asm:asm", version.ref = "asm" }
asm-commons = { module = "org.ow2.asm:asm-commons", version.ref = "asm" }
asm-tree = { module = "org.ow2.asm:asm-tree", version.ref = "asm" }

awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }

aws-java-sdk-lambda = { module = "com.amazonaws:aws-java-sdk-lambda" }

bcpkix = { module = "org.bouncycastle:bcpkix-jdk15on", version.ref = "bcpkix" }

blaze-persistence-core = { module = "com.blazebit:blaze-persistence-core-impl", version.ref = "blaze" }

brotli4j = { module = "com.aayushatharva.brotli4j:brotli4j", version.ref = "brotli4j" }

caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version.ref = "caffeine" }

compile-testing = { module = "com.google.testing.compile:compile-testing", version.ref = "compile-testing" }

geb-spock = { module = "org.gebish:geb-spock", version.ref = "geb" }
graal = { module = "org.graalvm.nativeimage:svm", version.ref = "graal-svm" }
groovy-test-junit5 = { module = "org.apache.groovy:groovy-test-junit5", version.ref = "managed-groovy" }

h2 = { module = "com.h2database:h2", version.ref = "h2" }
hibernate = { module = "org.hibernate:hibernate-core", version.ref = "hibernate" }

htmlunit = { module = "net.sourceforge.htmlunit:htmlunit", version.ref = "htmlunit" }

jakarta-inject-api = { module = "jakarta.inject:jakarta.inject-api", version.ref = "jakarta-inject-api" }
jakarta-inject-tck = { module = "jakarta.inject:jakarta.inject-tck", version.ref = "jakarta-inject-tck" }

javax-annotation-api = { module = "javax.annotation:javax.annotation-api", version.ref = "javax-annotation-api" }
jakarta-el = { module = "jakarta.el:jakarta.el-api", version.ref = "jakarta-el" }
jakarta-el-impl = { module = "org.glassfish:jakarta.el", version.ref = "jakarta-el-impl" }
javax-inject = { module = "javax.inject:javax.inject", version.ref = "javax-inject" }
javax-persistence = { module = "javax.persistence:javax.persistence-api", version.ref = "javax-persistence" }
jakarta-persistence = { module = "jakarta.persistence:jakarta.persistence-api", version.ref = "jakarta-persistence" }

jcache = { module = "javax.cache:cache-api", version.ref = "jcache" }

jetty-alpn-openjdk8-client = { module = "org.eclipse.jetty:jetty-alpn-openjdk8-client", version.ref = "jetty" }

jmh-core = { module = "org.openjdk.jmh:jmh-core", version.ref = "jmh" }
jmh-generator-annprocess = { module = "org.openjdk.jmh:jmh-generator-annprocess", version.ref = "jmh" }

jsr107 = { module = "org.jsr107.ri:cache-ri-impl", version.ref = "jsr107" }
jsr305 = { module = "com.google.code.findbugs:jsr305", version.ref = "jsr305" }

junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit5" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit5" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit5" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit5" }
junit-platform-engine = { module = "org.junit.platform:junit-platform-suite-engine", version.ref = "junit-platform" }
junit-vintage = { module = "org.junit.vintage:junit-vintage-engine", version.ref = "junit5" }

jazzer-junit = { module = "com.code-intelligence:jazzer-junit", version.ref = "jazzer" }

jetbrains-annotations = { module = "org.jetbrains:annotations", version.ref = "jetbrains-annotations" }

kotlin-kotest-junit5 = { module = "io.kotest:kotest-runner-junit5-jvm" }

log4j = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4j" }

logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

logbook-netty = { module = "org.zalando:logbook-netty", version.ref = "logbook-netty" }

micronaut-docs = { module = "io.micronaut.docs:micronaut-docs-asciidoc-config-props", version.ref = "micronaut-docs" }
micronaut-runtime-groovy = { module = "io.micronaut.groovy:micronaut-runtime-groovy", version.ref = "micronaut-groovy" }
micronaut-session = { module = "io.micronaut.session:micronaut-session", version.ref = "micronaut-session" }
micronaut-test-bom = { module = "io.micronaut.test:micronaut-test-bom", version.ref = "micronaut-test" }
micronaut-test-core = { module = "io.micronaut.test:micronaut-test-core", version.ref = "micronaut-test" }
micronaut-test-junit5 = { module = "io.micronaut.test:micronaut-test-junit5", version.ref = "micronaut-test" }
micronaut-test-kotest5 = { module = "io.micronaut.test:micronaut-test-kotest5", version.ref = "micronaut-test" }
micronaut-test-spock = { module = "io.micronaut.test:micronaut-test-spock", version.ref = "micronaut-test" }

micronaut-sql-jdbc = { module = "io.micronaut.sql:micronaut-jdbc", version.ref = "micronaut-sql" }
micronaut-sql-jdbc-tomcat = { module = "io.micronaut.sql:micronaut-jdbc-tomcat", version.ref = "micronaut-sql" }
mysql-driver = { module = "mysql:mysql-connector-java" }

neo4j-bolt = { module = "org.neo4j.driver:neo4j-java-driver", version.ref = "neo4j-java-driver" }

netty-tcnative = { module = 'io.netty:netty-tcnative' }
netty-tcnative-boringssl = { module = 'io.netty:netty-tcnative-boringssl-static' }

selenium-remote-driver = { module = "org.seleniumhq.selenium:selenium-remote-driver", version.ref = "selenium" }
selenium-api = { module = "org.seleniumhq.selenium:selenium-api", version.ref = "selenium" }
selenium-support = { module = "org.seleniumhq.selenium:selenium-support", version.ref = "selenium" }
selenium-driver-chrome = { module = "org.seleniumhq.selenium:selenium-chrome-driver", version.ref = "selenium" }
selenium-driver-firefox = { module = "org.seleniumhq.selenium:selenium-firefox-driver", version.ref = "selenium" }
selenium-driver-htmlunit = { module = "org.seleniumhq.selenium:htmlunit-driver", version.ref = "selenium" }

slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }

smallrye = { module = "io.smallrye:smallrye-fault-tolerance", version.ref = "smallrye" }
spock = { module = "org.spockframework:spock-core", version.ref = "spock" }
spotbugs = { module = "com.github.spotbugs:spotbugs-annotations", version.ref = "spotbugs" }

systemlambda = { module = "com.github.stefanbirkner:system-lambda", version.ref = "systemlambda" }

micronaut-tracing-jaeger = { module = "io.micronaut.tracing:micronaut-tracing-jaeger" }
micronaut-tracing-brave = { module = "io.micronaut.tracing:micronaut-tracing-brave" }

micronaut-validation = { module = "io.micronaut.validation:micronaut-validation" }
micronaut-validation-processor = { module = "io.micronaut.validation:micronaut-validation-processor" }

testcontainers-spock = { module = "org.testcontainers:spock", version.ref = "testcontainers" }

vertx = { module = "io.vertx:vertx-core", version.ref = "vertx" }
vertx-webclient = { module = "io.vertx:vertx-web-client", version.ref = "vertx" }
httpcomponents-client = { module = "org.apache.httpcomponents:httpclient", version.ref = "httpcomponents-client" }
httpcomponents-mime = { module = "org.apache.httpcomponents:httpmime", version.ref = "httpcomponents-client" }

wiremock = { module = "com.github.tomakehurst:wiremock-jre8", version.ref = "wiremock" }

[bundles]
asm = ["asm", "asm-commons"]

[plugins]
managed-kotlin-allopen = { id = "org.jetbrains.kotlin.plugin.allopen", version.ref = "managed-kotlin" }
managed-kotlin-noarg = { id = "org.jetbrains.kotlin.plugin.noarg", version.ref = "managed-kotlin" }
managed-kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "managed-kotlin" }
managed-kotlin-kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "managed-kotlin" }
managed-ksp = { id = "com.google.devtools.ksp", version.ref = "managed-ksp" }
