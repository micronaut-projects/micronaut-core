buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails:grails-docs:$grailsVersion"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
        classpath "gradle.plugin.io.sdkman:gradle-sdkvendor-plugin:1.0.0"
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.14.0' apply false
}

apply plugin: "io.sdkman.vendors"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

version project.projectVersion

ext {
    distInstallDir = file("$buildDir/dist-tmp")
    homeBinDir = file("bin")
    homeLibDir = file("lib")
    homeSrcDir = file("src")
}

ext {

    dependencyVersions = [
            dropwizard: [
                    version:dropwizardVersion,
                    group:'io.dropwizard.metrics',
                    name: 'metrics-core'
            ],
            groovy: [
                    version:groovyVersion,
                    group:'org.codehaus.groovy',
                    name: 'groovy',
                    modules:['groovy-test','groovy-ant','groovy-json','groovy-jmx']
            ],
            gorm: [
                    version:gormVersion,
                    group:'org.grails',
                    name: 'grails-datastore-core',
                    modules:['grails-datastore-gorm','grails-datastore-gorm-hibernate5']
            ],
            jackson: [
                version: jacksonVersion,
                group:'com.fasterxml.jackson.core',
                name:'jackson-databind'
            ],
            'jackson.modules': [
                    version: jacksonVersion,
                    group:'com.fasterxml.jackson.module',
                    name:'jackson-module-afterburner'
            ],
            'jackson.datatype': [
                    version: jacksonVersion,
                    group:'com.fasterxml.jackson.datatype',
                    name:'jackson-datatype-jdk8',
                    modules:['jackson-datatype-jsr310']
            ],
            jsr305:[
                version:jsr305Version,
                group:'com.google.code.findbugs',
                name:'jsr305'
            ],
            'micrometer.core': [
                    version: micrometerVersion,
                    group:'io.micrometer',
                    name:'micrometer-core'
            ],
            'micrometer.graphite': [
                    version: micrometerVersion,
                    group:'io.micrometer',
                    name:'micrometer-graphite'
            ],
            mongodb:[
                version: mongoVersion,
                group:'org.mongodb',
                name:'mongo-java-driver',
                modules:['mongodb-driver-async']
            ],
            neo4j: [
                version: neo4jVersion,
                group:'org.neo4j.test',
                name:'neo4j-harness'
            ],
            'neo4j.bolt': [
                version: '1.5.1',
                group:'org.neo4j.driver',
                name:'neo4j-java-driver'
            ],
            netty: [
                version: nettyVersion,
                group:'io.netty',
                name:'netty-codec-http',
                modules:['netty-handler','netty-handler-proxy']
            ],
            lettuce: [
                version: lettuceVersion,
                group:'io.lettuce',
                name:'lettuce-core'

            ],
            spring: [
                version: springVersion,
                group:'org.springframework',
                name: 'spring-core',
                modules:['spring-context', 'spring-tx', 'spring-orm']
            ],
            snakeyaml: [
                version: yamlVersion,
                group:'org.yaml',
                name: 'snakeyaml'
            ],
            slf4j: [
                version: slf4jVersion,
                group:'org.slf4j',
                name: 'slf4j-api',
                modules: ['slf4j-simple']
            ],
            spock: [
                version: spockVersion,
                group:'org.spockframework',
                name: 'spock-core'
            ],
            'reactive.streams':[
                version:reactiveStreamsVersion,
                group:'org.reactivestreams',
                name:'reactive-streams'
            ],
            rxjava1: [
                version: rxJava1Version,
                group:'io.reactivex',
                name: 'rxjava'
            ],
            'rxjava1.interop': [
                    version: rxJavaInteropVersion,
                    group:'com.github.akarnokd',
                    name: 'rxjava2-interop'
            ],
            rxjava2: [
                version: rxJava2Version,
                group:'io.reactivex.rxjava2',
                name: 'rxjava'
            ],
            reactor:[
                version: reactorVersion,
                group:'io.projectreactor',
                name: 'reactor-core'
            ],
            validation: [
                version: validationVersion,
                group:'javax.validation',
                name: 'validation-api'
            ],
            hystrix: [
                    version: hystrixVersion,
                    group:'com.netflix.hystrix',
                    name: 'hystrix-core',
                    modules:['hystrix-serialization']
            ]

    ]

    dependencyVersion = { String name ->
        def dep = dependencyVersions[name]
        if(dep == null) {
            throw new IllegalArgumentException("No core dependency defined for name: $name")
        }
        return "$dep.group:$dep.name:$dep.version".toString()
    }
    dependencyModuleVersion = { String name, String module ->
        def dep = dependencyVersions[name]
        if(dep == null) {
            throw new IllegalArgumentException("No core dependency defined for name: $name")
        }
        return "$dep.group:$module:$dep.version".toString()
    }

}

subprojects { subproject ->

    version project.projectVersion

    ext {
        userOrg = "grails"
        isGrailsPlugin = false
        isConfiguration = subproject.projectDir.parentFile.name == 'configurations'
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    }

    if (subproject.name == "configurations") {
        return
    }

    if(isConfiguration) {
        group "io.micronaut.configuration"
    }
    else {
        group projectGroupId
    }


    repositories {
        maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    
    if (subproject.name.startsWith("examples")) {
        // apply plugin:"org.grails.grails-web"
    }
    else {
        apply plugin:"groovy"
        apply plugin:"java"
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
//        compileJava.options.compilerArgs.add '-parameters'
//        compileTestJava.options.compilerArgs.add '-parameters'
        if(!subproject.name.contains('test-suite')) {
            apply from:"${rootProject.rootDir}/gradle/publishing.gradle"
            apply plugin: 'checkstyle'
            
            checkstyle {
                toolVersion = 8.10
                configFile = rootProject.file('config/checkstyle/checkstyle.xml')

                // Per submodule
                maxErrors = 5
                maxWarnings = 10

                showViolations = true
            }

            checkstyleTest.enabled = false
        }
    }

    tasks.withType(Test) {
        jvmArgs '-Duser.country=US'
        jvmArgs '-Duser.language=en'
        testLogging {
            showStandardStreams = !System.getenv("TRAVIS")
            exceptionFormat = 'full'
        }
        afterSuite {
            System.out.print('.')
            System.out.flush()
        }
        reports.html.enabled = !System.getenv("TRAVIS")
        reports.junitXml.enabled = !System.getenv("TRAVIS")
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled = !System.getenv("TRAVIS")
            html.enabled = !System.getenv("TRAVIS")
        }
    }

    configurations {
        shadowCompile
        shadowRuntime
        documentation
        all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                String group = details.requested.group
                if(group == 'org.codehaus.groovy') {
                    details.useVersion(groovyVersion)
                }
                if(group == 'org.ow2.asm') {
                    details.useVersion(asmVersion)
                }
            }
        }
    }

    dependencies {
        if (subproject.name != "bom") {
            compile dependencyVersion("slf4j")
        }

        compileOnly "com.github.ben-manes.caffeine:caffeine:$caffeineVersion"
        testCompile "com.github.ben-manes.caffeine:caffeine:$caffeineVersion"
        testCompile dependencyVersion("groovy")
        testCompile(dependencyVersion("spock")) {
            exclude module:'groovy-all'
        }
        testCompile "cglib:cglib-nodep:2.2.2"
        testCompile "org.objenesis:objenesis:1.4"

        testRuntime "ch.qos.logback:logback-classic:1.2.3"
        testCompile "org.codehaus.groovy:groovy-test:$groovyVersion"
        compileOnly "org.ow2.asm:asm:$asmVersion"
        compileOnly "org.ow2.asm:asm-commons:$asmVersion"

        testCompile "org.ow2.asm:asm:$asmVersion"
        testCompile "org.ow2.asm:asm-commons:$asmVersion"
    }

    task allDeps(type: DependencyReportTask) {}
}

apply from:"gradle/docs.gradle"

// IDEA 2017.2 made a breaking change with IDE build output vs gradle build output
// [see https://youtrack.jetbrains.com/issue/IDEA-175172]
// the problem here is the gradle build uses <module-dir>/build/classes/main
// while IDEA uses <module-dir>/out/production/..
// As a result, compiling ast or java-inject module and using the IDEA test runner fails because the
// generated bean classes for injection are in <module-dir>/build, not <module-dir>/out
allprojects {
    apply plugin: 'idea'

    idea {
        module {
            outputDir file('build/classes/java/main')
            testOutputDir file('build/classes/groovy/test')
        }
    }
    apply from: rootProject.file('gradle/license.gradle')
}

task aggregateReports {
    group 'verification'
    doLast() {
        def html = "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Micronaut reports</title></head><body><img src='http://micronaut.io/images/micronautlogo.svg' alt='Micronaut'/><ul>"
        subprojects.each { subproject ->
            if ( subproject.tasks.find { Task task -> task.name == 'test' } ) {
              def link = ''
                if (new File("${subproject.buildDir}/reports/checkstyle").exists()) {
                    mkdir("${rootProject.buildDir}/reports/${subproject.name}/checkstyle")
                    copy {
                        from "${subproject.buildDir}/reports/checkstyle"
                        into "${rootProject.buildDir}/reports/${subproject.name}/checkstyle"
                    }
                    link += " <a href='${subproject.name}/checkstyle/index.html'>checkstyle</a>"
                }
              if (new File("${subproject.buildDir}/test-results/test").exists()) {
                  int failures = 0
                  int errors = 0
                  int skipped = 0
                  int tests = 0
                  new File("${subproject.buildDir}/test-results/test").eachFile() { file ->
                      if ( file.name.endsWith('.xml') ) {
                          def testsuite = new XmlSlurper().parseText(file.text)
                          failures += "${testsuite['@failures']}" as int
                          errors += "${testsuite['@errors']}" as int
                          skipped += "${testsuite['@skipped']}" as int
                          tests += "${testsuite['@tests']}" as int
                      }
                  }
                  link += " tests: ${tests} skipped: ${skipped} <span style='${errors ? 'color: red;' : ''}'>errors: ${errors}</span> <span style='${failures ? 'color: red;' : ''}'>failures: ${failures}</span>"
              }
              if (new File("${subproject.buildDir}/reports/tests/test").exists()) {
                  mkdir("${rootProject.buildDir}/reports/${subproject.name}/test")
                  copy {
                      from "${subproject.buildDir}/reports/tests/test"
                      into "${rootProject.buildDir}/reports/${subproject.name}/test"
                  }
                  link += " <a href='${subproject.name}/test/index.html'>test</a>"
              }


              if (link) {
                  html += "<li><b>${subproject.name}</b> $link</li>"
              }
            }
        }
        html += "</ul></body></html>"
        File f = new File("${rootProject.buildDir}/reports/index.html")
        f.text = html
    }
}


sdkman {
    api = "https://vendors.sdkman.io"
    consumerKey = System.getenv("GVM_SDKVENDOR_KEY") ?: project.hasProperty("gvmSdkvendorKey") ? project.gvmSdkvendorKey : ''
    consumerToken = System.getenv("GVM_SDKVENDOR_TOKEN") ?: project.hasProperty("gvmSdkvendorToken") ? project.gvmSdkvendorToken : ''
    candidate = "micronaut"
    version = project.version
    url = "https://github.com/micronaut-projects/micronaut-core/releases/download/v${project.version}/micronaut-${project.version}.zip"
    hashtag = "#micronautfw"
}