/*
 * Copyright 2017-2020 original authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.micronaut.core.beans;

import io.micronaut.core.annotation.Internal;
import io.micronaut.core.annotation.UsedByGeneratedCode;

import javax.annotation.Nonnull;


/**
 * Abstract bean introspection reference used by {@link io.micronaut.core.beans.BeanIntrospector} to soft load introspections. This class is subclasses at compilation time by generated byte code and should not be used directly.
 *
 * @param <T> The bean type
 * @author graemerocher
 * @since 1.1
 */
@Internal
@UsedByGeneratedCode
public abstract class AbstractBeanIntrospectionReference<T> implements BeanIntrospectionReference<T> {

    private Boolean present = null;

    /**
     * Default constructor.
     */
    @UsedByGeneratedCode
    @Internal
    protected AbstractBeanIntrospectionReference() {
    }

    @SuppressWarnings("ConstantConditions")
    @Override
    public final boolean isPresent() {
        if (present == null) {
            try {
                present = getBeanType() != null;
            } catch (Throwable e) {
                present = false;
            }
        }
        return present;
    }

    @Nonnull
    @Override
    public String getName() {
        return getBeanType().getName();
    }
}
